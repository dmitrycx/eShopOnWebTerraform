# This is a basic workflow to help you get started with Actions

name: Terraform

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v2

      # retrieves the Terraform CLI used in the GitHub action workflow.  
      # In addition, this step loads the TF_API_TOKEN secret as an environment variable, enabling the Terraform CLI to authenticate to Terraform Cloud.
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # checks whether the configuration has been properly formatted. If the configuration isn't properly formatted this step will produce an error. 
      # It enforces Terraform best practices by preventing your team from merging misformatted configuration to main.
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        
      # initializes the configuration used in the GitHub action workflow.
      - name: Terraform Init
        id: init
        run: terraform init
        
      # validates the configuration used in the GitHub action workflow.
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        
      # generates a Terraform plan. Since main.tf defines Terraform Cloud as the backend, this step triggers a remote plan run in the Terraform Cloud. Notice:
      # - This step only runs on pull requests. The PR generates a plan. When the PR is merged, that plan will be applied.
      # - This step will continue even when it errors. This allows the next step to display the plan error message even if this step fails.
      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        continue-on-error: true

      # adds a comment to the pull request with the results of the format, init and plan steps. 
      # In addition, it displays the plan output (steps.plan.outputs.stdout). 
      # This allows your team to review the results of the plan directly in the PR instead of opening Terraform Cloud. 
      # This step only runs on pull requests.
      - name: Update Pull Request
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })


      # returns whether a plan was successfully generated or not. This step highlights whenever a plan fails because the "Terraform Plan" step continues on error.
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1


      # applies the configuration. This step will only run when a commit is pushed to main.
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve





